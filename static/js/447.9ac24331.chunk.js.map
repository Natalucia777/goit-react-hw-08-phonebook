{"version":3,"file":"static/js/447.9ac24331.chunk.js","mappings":"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","sources":["components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErrorMessage.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","views/ContactsView/ContactsView.styled.js","views/ContactsView/ContactsView.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 15px;\n  font-weight: 600;\n`;","import { ErrorMessage } from \"formik\";\nimport { ErrorText } from \"./ErrorMessage.styled\";\n\nconst FormError = ({ name }) => {\n    return (\n        <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>}/>\n    )\n};\n\nexport default FormError;","//import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { selectContactsItems } from '../../redux/contactsSlice';\nimport { addContact } from 'redux/operations';\nimport FormError from 'components/ErrorMessage/ErrorMessage';\nimport { FormWrap } from './ContactForm.styled';\nimport { StLabel } from './ContactForm.styled';\nimport { Input } from './ContactForm.styled';\nimport { FormButton } from './ContactForm.styled';\n\nconst initialValues = { name: '', number: '' };\nconst schema = Yup.object().shape({\n  name: Yup.string().min(3).required(),\n  number: Yup.number().min(4).required(),\n});\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsItems);\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    const isDuplicateName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isDuplicateName) {\n      toast.info(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormWrap>\n        <StLabel htmlFor=\"name\">\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <FormError name=\"name\" />\n        </StLabel>\n\n        <StLabel htmlFor=\"user_tel\">\n          Number\n          <Input type=\"tel\" name=\"number\" />\n          <FormError name=\"number\" />\n        </StLabel>\n\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </FormWrap>\n    </Formik>\n  );\n};\n\nexport default ContactForm;","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 15px;\n  position: relative;\n  list-style-type: none;\n  &::before {\n    content: '';\n    position: absolute;\n    left: -20px;\n    top: 10px;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: black;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/operations';\nimport { fetchContacts } from '../../redux/operations';\nimport { FormButton } from 'components/ContactForm/ContactForm.styled';\nimport { ListItem } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <ListItem key={contact.id}>\n        {contact.name}: {contact.number}\n        <FormButton onClick={\n          async () => {\n            await dispatch(deleteContact(contact.id));\n          dispatch(fetchContacts());\n          }\n        }>\n          Delete\n        </FormButton>\n      </ListItem>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n\nexport default ContactItem;","import styled from '@emotion/styled';\n\nexport const AddList = styled.ul`\n  padding-left: 0;\n  margin: 0;\n  background-color: rgb(154, 202, 240);\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  flex-direction: column;\n  border: 1px solid #000;\n  padding: 20px;\n  border-radius: 4px;\n`;\n","import { useSelector } from 'react-redux';\nimport { getFilterValue } from '../../redux/filterSlice';\nimport { selectContactsItems } from '../../redux/contactsSlice';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { AddList } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContactsItems);\n  const filter = useSelector(getFilterValue);\n\n  const getFlContacts = (contacts, filter) => {\n    if (filter) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      return contacts;\n    }\n  };\n\n  const flContacts = getFlContacts(contacts, filter);\n  if (!flContacts || flContacts.length === 0) {\n    return <div>No contacts found</div>;\n  }\n  return (\n    <AddList>\n      {flContacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact} />\n      ))}\n    </AddList>\n  );\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const FilterWindow = styled.div`\nmargin-bottom: 15px;\n`;\n\nexport const FilterLabel = styled.label`\ncolor: #000;\n`;\n\nexport const FilterInput = styled.input`\nmargin-left: 20px;\n`;","import { getFilterValue, setFilter } from '../../redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FilterWindow } from './Filter.styled';\nimport { FilterLabel } from './Filter.styled';\nimport { FilterInput } from './Filter.styled';\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilterValue);\n  const changeFilter = evt => {\n    return dispatch(setFilter(evt.target.value));\n  };\n  \n  return (\n    <FilterWindow>\n      <FilterLabel>\n        Filter: Find contacts by name\n        <FilterInput type=\"text\" value={filter} onChange={changeFilter} />\n      </FilterLabel>\n    </FilterWindow>\n  );\n};\n\nexport default Filter;","import styled from '@emotion/styled';\n\nexport const ContactsTitle = styled.h1`\n  font-size: 28px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading, selectError } from 'redux/contactsSlice';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { ContactsTitle } from 'views/ContactsView/ContactsView.styled';\n\nfunction ContactsView() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      {isLoading && !error && <ContactsTitle>Request in progress</ContactsTitle>}\n      <ContactsTitle>Add new contact</ContactsTitle>\n      <ContactForm />\n      {isLoading && <Loader />}\n      <ContactList />\n      <ContactsTitle>Find the contact</ContactsTitle>\n      <Filter />\n    </div>\n  );\n}\n\nexport default ContactsView;\n"],"names":["ErrorText","styled","name","render","message","initialValues","number","schema","Yup","shape","min","required","dispatch","useDispatch","contacts","useSelector","selectContactsItems","validationSchema","onSubmit","values","resetForm","find","contact","toLowerCase","toast","addContact","htmlFor","type","ListItem","onClick","deleteContact","id","fetchContacts","AddList","flContacts","filter","includes","getFlContacts","getFilterValue","length","map","FilterWindow","FilterLabel","FilterInput","value","onChange","evt","setFilter","target","ContactsTitle","isLoading","selectIsLoading","error","selectError","useEffect","Loader"],"sourceRoot":""}