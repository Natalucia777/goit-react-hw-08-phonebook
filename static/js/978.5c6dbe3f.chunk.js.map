{"version":3,"file":"static/js/978.5c6dbe3f.chunk.js","mappings":"sMAEaA,E,QAAYC,EAAAA,EAAH,gF,UCOtB,EANkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACI,SAAC,KAAD,CAAcA,KAAMA,EAAMC,OAAQ,SAAAC,GAAO,OAAI,SAACJ,EAAD,UAAYI,GAAhB,GAEhD,C,yKCJYC,GAAYJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,kUAeTM,EAAaN,EAAAA,EAAAA,MAAH,uKASVO,GAAaP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,+MAWVS,EAAcT,EAAAA,EAAAA,OAAH,gS,UC3BlBU,EAAgB,CAAEC,MAAO,GAAIC,SAAU,IACvCC,EAASC,EAAAA,KAAaC,MAAM,CAChCJ,MAAOG,EAAAA,KAAaE,IAAI,GAAGC,WAC3BL,SAAUE,EAAAA,KAAaE,IAAI,GAAGE,IAAI,IAAID,aAqCxC,MAlCA,WACE,IAAME,GAAWC,EAAAA,EAAAA,MASjB,OACE,+BACE,SAAC,KAAD,CACEV,cAAeA,EACfW,iBAAkBR,EAClBS,SAbe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBb,EAAoBY,EAApBZ,MAAOC,EAAaW,EAAbX,SACfO,GAASM,EAAAA,EAAAA,IAAM,CAAEd,MAAAA,EAAOC,SAAAA,KACrBc,SACAC,MAAK,kBAAMC,EAAAA,GAAAA,QAAc,uBAApB,IACLC,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,kCAAlB,IACTJ,GACD,EAGG,UAIE,UAACpB,EAAD,YACE,UAACE,EAAD,CAAYwB,QAAQ,QAApB,UAA4B,SAE1B,SAACvB,EAAD,CAAYwB,KAAK,QAAQ9B,KAAK,WAC9B,SAAC,IAAD,CAAWA,KAAK,cAElB,UAACK,EAAD,CAAYwB,QAAQ,WAApB,UAA+B,YAE7B,SAACvB,EAAD,CAAYwB,KAAK,WAAW9B,KAAK,cACjC,SAAC,IAAD,CAAWA,KAAK,iBAElB,SAACQ,EAAD,CAAasB,KAAK,SAAlB,SAA2B,gBAKpC,C","sources":["components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErrorMessage.jsx","views/LoginView/LoginView.styled.js","views/LoginView/LoginView.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 15px;\n  font-weight: 600;\n`;","import { ErrorMessage } from \"formik\";\nimport { ErrorText } from \"./ErrorMessage.styled\";\n\nconst FormError = ({ name }) => {\n    return (\n        <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>}/>\n    )\n};\n\nexport default FormError;","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormLogin = styled(Form)`\n  border: 2px solid grey;\n  border-radius: 40px;\n  background: rgb(2, 48, 85);\n  width: 400px;\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  margin-right: auto;\n  margin-left: auto;\n`;\nexport const LabelLogin = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 20px;\n  font-weight: 600;\n  font-family: sans-serif;\n  color: #fff;\n`;\nexport const InputLogin = styled(Field)`\n  width: 250px;\n  border: 1px solid rgb(207, 207, 207);\n  padding: 5px;\n  font-size: 15px;\n  outline: transparent;\n\n  &:focus {\n    border: 1px solid rgb(235, 129, 129);\n  }\n`;\nexport const ButtonLogin = styled.button`\n  width: 100px;\n  height: 35px;\n  padding: 5px;\n  background-color: white;\n  border: 2px solid grey;\n  font-size: 15px;\n  font-weight: 600;\n  border-radius: 6px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(54, 184, 207);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/authorization/auth-operations';\nimport {  Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormError from 'components/ErrorMessage/ErrorMessage';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { FormLogin, LabelLogin, InputLogin, ButtonLogin,\n} from 'views/LoginView/LoginView.styled';\n\nconst initialValues = { email: '', password: '' };\nconst schema = Yup.object().shape({\n  email: Yup.string().min(4).required(),\n  password: Yup.string().min(5).max(16).required(),\n});\n\nfunction LoginView() {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    dispatch(logIn({ email, password }))\n      .unwrap()\n      .then(() => toast.success('Login In succesfully'))\n      .catch(() => toast.error('Something went wrong. Try again'));\n    resetForm();\n  };\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit} >\n        <FormLogin>\n          <LabelLogin htmlFor=\"email\">\n            Email\n            <InputLogin type=\"email\" name=\"email\" />\n            <FormError name=\"email\" />\n          </LabelLogin>\n          <LabelLogin htmlFor=\"password\">\n            Password\n            <InputLogin type=\"password\" name=\"password\" />\n            <FormError name=\"password\" />\n          </LabelLogin>\n          <ButtonLogin type=\"submit\">Login</ButtonLogin>\n        </FormLogin>\n      </Formik>\n    </>\n  );\n}\n\nexport default LoginView;"],"names":["ErrorText","styled","name","render","message","FormLogin","Form","LabelLogin","InputLogin","Field","ButtonLogin","initialValues","email","password","schema","Yup","shape","min","required","max","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","logIn","unwrap","then","toast","catch","htmlFor","type"],"sourceRoot":""}