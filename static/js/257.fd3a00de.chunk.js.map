{"version":3,"file":"static/js/257.fd3a00de.chunk.js","mappings":"sMAEaA,E,QAAYC,EAAAA,EAAH,gF,UCOtB,EANkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACI,SAAC,KAAD,CAAcA,KAAMA,EAAMC,OAAQ,SAAAC,GAAO,OAAI,SAACJ,EAAD,UAAYI,GAAhB,GAEhD,C,yKCJYC,GAAeJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,2TAgBZM,EAAgBN,EAAAA,EAAAA,MAAH,oLAUbO,GAAgBP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,+MAYbS,EAAiBT,EAAAA,EAAAA,OAAH,iS,UC/BrBU,EAAgB,CAAET,KAAM,GAAIU,MAAO,GAAIC,SAAU,IACjDC,EAASC,EAAAA,KAAaC,MAAM,CAChCd,KAAMa,EAAAA,KAAaE,IAAI,GAAGC,WAC1BN,MAAOG,EAAAA,KAAaE,IAAI,GAAGC,WAC3BL,SAAUE,EAAAA,KAAaE,IAAI,GAAGE,IAAI,IAAID,aAoDxC,MAjDA,WACE,IAAME,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,+BACE,SAAC,KAAD,CACEV,cAAeA,EACfW,iBAAkBR,EAClBS,SApBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAIH,GACZ,IAAQtB,EAA0BsB,EAA1BtB,KAAMU,EAAoBY,EAApBZ,MAAOC,EAAaW,EAAbX,SACrBO,GACEQ,EAAAA,EAAAA,IAAS,CACP1B,KAAAA,EACAU,MAAAA,EACAC,SAAAA,KAGDgB,SACAC,MAAK,kBAAMC,EAAAA,GAAAA,QAAc,2BAApB,IACLC,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,kCAAlB,IACTN,GACD,EAGG,UAKE,UAACpB,EAAD,YACE,UAACE,EAAD,CAAe0B,QAAQ,OAAvB,UAA8B,YAE5B,SAACzB,EAAD,CAAe0B,KAAK,OAAOhC,KAAK,UAChC,SAACiC,EAAA,EAAD,CAAcjC,KAAK,aAGrB,UAACK,EAAD,CAAe0B,QAAQ,QAAvB,UAA+B,SAE7B,SAACzB,EAAD,CAAe0B,KAAK,QAAQhC,KAAK,WACjC,SAACiC,EAAA,EAAD,CAAcjC,KAAK,cAGrB,UAACK,EAAD,CAAe0B,QAAQ,WAAvB,UAAkC,YAEhC,SAACzB,EAAD,CAAe0B,KAAK,WAAWhC,KAAK,cACpC,SAACiC,EAAA,EAAD,CAAcjC,KAAK,iBAErB,SAACQ,EAAD,CAAgBwB,KAAK,SAArB,SAA8B,mBAKvC,C","sources":["components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErrorMessage.jsx","views/RegisterView/RegisterView.styled.js","views/RegisterView/RegisterView.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 15px;\n  font-weight: 600;\n`;","import { ErrorMessage } from \"formik\";\nimport { ErrorText } from \"./ErrorMessage.styled\";\n\nconst FormError = ({ name }) => {\n    return (\n        <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>}/>\n    )\n};\n\nexport default FormError;","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormRegister = styled(Form)`\n  border: 2px solid gray;\n  border-radius: 40px;\n  background: #c7c7c1;\n  width: 400px;\n  height: 360px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 20px;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\nexport const LabelRegister = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 20px;\n  font-weight: 600;\n  font-family: sans-serif;\n  color: rgb(60, 216, 240);\n`;\n\nexport const InputRegister = styled(Field)`\n  width: 250px;\n  border: 1px solid rgb(207, 207, 207);\n  padding: 5px;\n  font-size: 15px;\n  outline: transparent;\n\n  &:focus {\n    border: 1px solid rgb(235, 129, 129);\n  }\n`;\n\nexport const ButtonRegister = styled.button`\n  width: 100px;\n  height: 35px;\n  padding: 5px;\n  background-color: white;\n  border: 2px solid grey;\n  font-size: 13px;\n  font-weight: 600;\n  border-radius: 6px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n     background-color: rgb(54, 184, 207);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { register } from '../../redux/authorization/auth-operations';\nimport {  Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport { FormRegister,LabelRegister, InputRegister, ButtonRegister,\n} from 'views/RegisterView/RegisterView.styled.js';\n\nconst initialValues = { name: '', email: '', password: '' };\nconst schema = Yup.object().shape({\n  name: Yup.string().min(4).required(),\n  email: Yup.string().min(4).required(),\n  password: Yup.string().min(5).max(16).required(),\n});\n\nfunction RegisterView() {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    const { name, email, password } = values;\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    )\n      .unwrap()\n      .then(() => toast.success('Registration succesfully'))\n      .catch(() => toast.error('Something went wrong. Try again'));\n    resetForm();\n  };\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormRegister>\n          <LabelRegister htmlFor=\"name\">\n            Username\n            <InputRegister type=\"text\" name=\"name\" />\n            <ErrorMessage name=\"name\" />\n          </LabelRegister>\n\n          <LabelRegister htmlFor=\"email\">\n            Email\n            <InputRegister type=\"email\" name=\"email\" />\n            <ErrorMessage name=\"email\" />\n          </LabelRegister>\n\n          <LabelRegister htmlFor=\"password\">\n            Password\n            <InputRegister type=\"password\" name=\"password\" />\n            <ErrorMessage name=\"password\" />\n          </LabelRegister>\n          <ButtonRegister type=\"submit\">Register</ButtonRegister>\n        </FormRegister>\n      </Formik>\n    </>\n  );\n}\n\nexport default RegisterView;"],"names":["ErrorText","styled","name","render","message","FormRegister","Form","LabelRegister","InputRegister","Field","ButtonRegister","initialValues","email","password","schema","Yup","shape","min","required","max","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","console","log","register","unwrap","then","toast","catch","htmlFor","type","ErrorMessage"],"sourceRoot":""}